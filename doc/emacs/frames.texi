@c This is part of the Emacs manual.
@c Copyright (C) 1985, 1986, 1987, 1993, 1994, 1995, 1997, 1999, 2000,
@c   2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010 Free Software Foundation, Inc.
@c See file emacs.texi for copying conditions.
@node Frames, International, Windows, Top
@chapter Frames and Graphical Displays
@cindex frames

  When using a graphical display, you can create multiple system-level
``windows'' in a single Emacs session.  We refer to these system-level
windows as @dfn{frames}.  A frame initially contains a single Emacs
window; however, you can subdivide this Emacs window into smaller
windows, all fitting into the same frame.  Each frame normally
contains its own echo area and minibuffer.

  To avoid confusion, we reserve the word ``window'' for the
subdivisions that Emacs implements, and never use it to refer to a
frame.

  Any editing you do in one frame affects the other frames.  For
instance, if you put text in the kill ring in one frame, you can yank
it in another frame.  If you exit Emacs through @kbd{C-x C-c} in one
frame, it terminates all the frames.  To delete just one frame, use
@kbd{C-x 5 0} (that is zero, not @kbd{o}).

  Emacs compiled for MS-DOS emulates some windowing functionality,
so that you can use many of the features described in this chapter.
@iftex
@xref{MS-DOS Mouse,,,emacs-xtra,Specialized Emacs Features}.
@end iftex
@ifnottex
@xref{MS-DOS Mouse}.
@end ifnottex

@menu
* Cut and Paste::       Mouse commands for cut and paste.
* Mouse References::    Using the mouse to select an item from a list.
* Menu Mouse Clicks::   Mouse clicks that bring up menus.
* Mode Line Mouse::     Mouse clicks on the mode line.
* Creating Frames::     Creating additional Emacs frames with various contents.
* Frame Commands::      Iconifying, deleting, and switching frames.
* Fonts::               Changing the frame font.
* Speedbar::            How to make and use a speedbar frame.
* Multiple Displays::   How one Emacs job can talk to several displays.
* Special Buffer Frames::  You can make certain buffers have their own frames.
* Frame Parameters::    Changing the colors and other modes of frames.
* Scroll Bars::	        How to enable and disable scroll bars; how to use them.
* Wheeled Mice::        Using mouse wheels for scrolling.
* Drag and Drop::       Using drag and drop to open files and insert text.
* Menu Bars::	        Enabling and disabling the menu bar.
* Tool Bars::           Enabling and disabling the tool bar.
* Dialog Boxes::        Controlling use of dialog boxes.
* Tooltips::            Displaying information at the current mouse position.
* Mouse Avoidance::     Preventing the mouse pointer from obscuring text.
* Non-Window Terminals::  Multiple frames on terminals that show only one.
* Text-Only Mouse::     Using the mouse in text-only terminals.
@end menu

@node Cut and Paste
@section Killing and Yanking on Graphical Displays

  This section describes commands for selecting a region, killing, and
yanking using the mouse.

@menu
* Mouse Commands::      Moving, cutting, and pasting, with the mouse.
* Word and Line Mouse:: Mouse commands for selecting whole words or lines.
* Cut/Paste Other App:: Transfering text between Emacs and other apps.
* Secondary Selection:: Cutting without altering point and mark.
* Clipboard::           Using the clipboard for selections.
@end menu

@node Mouse Commands
@subsection Mouse Commands for Editing
@cindex mouse buttons (what they do)

@kindex Mouse-1
@kindex Mouse-2
@kindex Mouse-3
@table @kbd
@item Mouse-1
Move point to where you click (@code{mouse-set-point}).

@item Drag-Mouse-1
Activate the region around the text selected by dragging, and copy it
to the kill ring (@code{mouse-set-region}).

@item Mouse-2
Yank the last killed text at the click position
(@code{mouse-yank-at-click}).

@item Mouse-3
If the region is active, move the nearer end of the region to the
click position; otherwise, set mark at the current value of point and
point at the click position.  Save the resulting region in the kill
ring; on a second click, kill it (@code{mouse-save-then-kill}).
@end table

@findex mouse-set-point
  The most basic mouse command is @code{mouse-set-point}, which is
called by clicking with the left mouse button, @kbd{Mouse-1}, in the
text area of a window.  This moves point to the position where you
clicked.

@vindex x-mouse-click-focus-ignore-position
  Normally, Emacs does not distinguish between ordinary mouse clicks
and clicks that select a frame.  When you click on a frame to select
it, that also changes the selected window and cursor position
according to the mouse click position.  On the X window system, you
can change this behavior by setting the variable
@code{x-mouse-click-focus-ignore-position} to @code{t}.  Then the
first click selects the frame, but does not affect the selected window
or cursor position.  If you click again in the same place, that click
will be in the selected frame, so it will change the window or cursor
position.

@findex mouse-set-region
@vindex mouse-drag-copy-region
  Holding down @kbd{Mouse-1} and ``dragging'' the mouse over a stretch
of text activates the region around that text
(@code{mouse-set-region}).  @xref{Mark}.  Emacs places the mark where
you started holding down the mouse button, and point where you release
it.  In addition, the region is copied into the kill ring (@pxref{Kill
Ring}).  If you don't want Emacs to copy the region, change the
variable @code{mouse-drag-copy-region} to @code{nil}.

@vindex mouse-scroll-min-lines
  If you move the mouse off the top or bottom of the window while
dragging, the window scrolls at a steady rate until you move the mouse
back into the window.  This way, you can select regions that don't fit
entirely on the screen.  The number of lines scrolled per step depends
on how far away from the window edge the mouse has gone; the variable
@code{mouse-scroll-min-lines} specifies a minimum step size.

@findex mouse-yank-at-click
@vindex mouse-yank-at-point
  Clicking with the middle mouse button, @kbd{Mouse-2}, moves point to
the position where you clicked and performs a yank
(@code{mouse-yank-at-click}).  @xref{Yanking}.  If you change the
variable @code{mouse-yank-at-point} to a non-@code{nil} value,
@kbd{Mouse-2} does not move point.  Then it does not matter where you
click, or even which of the frame's windows you click on; the yank
occurs at the existing point.  This variable also affects yanking the
primary and secondary selections (@pxref{Cut/Paste Other App}).

@findex mouse-save-then-kill
  Clicking with the right mouse button, @kbd{Mouse-3}, runs the
command @code{mouse-save-then-kill}.  This performs several actions
depending on where you click and the status of the region:

@itemize @bullet
@item
If no region is active, clicking @kbd{Mouse-3} activates the region,
placing the mark where point was and point at the clicked position.
In addition, the text in the region is copied to the kill ring.

@item
If a region is active, clicking @kbd{Mouse-3} adjusts the nearer end
of the region by moving it to the clicked position.  The adjusted
region's text is copied to the kill ring; if the text in the original
region was already on the kill ring, it replaces it there.

@item
If you originally specified the region using a double or triple
@kbd{Mouse-1}, so that the region is defined to consist of entire
words or lines, then adjusting the region with @kbd{Mouse-3} also
proceeds by entire words or lines.

@item
If you use @kbd{Mouse-3} a second time consecutively, at the same
place, that kills the region already selected.  Thus, the simplest way
to kill text with the mouse is to click @kbd{Mouse-1} at one end, then
click @kbd{Mouse-3} twice at the other end.  To copy the text into the
kill ring without deleting it from the buffer, press @kbd{Mouse-3}
just once---or just drag across the text with @kbd{Mouse-1}.  Then you
can copy it elsewhere by yanking it.
@end itemize

  Whenever you set the region using any of the mouse commands
described above, the mark will be deactivated by any subsequent
unshifted cursor motion command, in addition to the usual ways of
deactivating the mark.  @xref{Shift Selection}.  While the region
remains active, typing @key{Backspace} or @key{Delete} deletes the
text in that region and deactivates the mark; this behavior follows a
convention established by other graphical programs, and it does
@emph{not} apply when you set the region any other way, including
shift-selection (@pxref{Shift Selection}).

@cindex Delete Selection mode
@cindex mode, Delete Selection
@findex delete-selection-mode
  Many graphical applications also follow the convention that
insertion while text is selected deletes the selected text.  You can
make Emacs behave this way by enabling Delete Selection mode.
@xref{Using Region}.

@node Word and Line Mouse
@subsection Mouse Commands for Words and Lines

  These variants of @kbd{Mouse-1} select entire words or lines at a
time.  Emacs activates the region around the selected text, which is
also copied to the kill ring.

@table @kbd
@item Double-Mouse-1
Select the text around the word which you click on.

Double-clicking on a character with ``symbol'' syntax (such as
underscore, in C mode) selects the symbol surrounding that character.
Double-clicking on a character with open- or close-parenthesis syntax
selects the parenthetical grouping which that character starts or
ends.  Double-clicking on a character with string-delimiter syntax
(such as a singlequote or doublequote in C) selects the string
constant (Emacs uses heuristics to figure out whether that character
is the beginning or the end of it).

@item Double-Drag-Mouse-1
Select the text you drag across, in the form of whole words.

@item Triple-Mouse-1
Select the line you click on.

@item Triple-Drag-Mouse-1
Select the text you drag across, in the form of whole lines.
@end table

@node Cut/Paste Other App
@subsection Cut and Paste with Other Window Applications

@cindex X cutting and pasting
@cindex X selection
@cindex primary selection
@cindex selection, primary
  When running Emacs under the X window system, you can easily
transfer text between Emacs and other X applications using the
@dfn{primary selection} (also called the @dfn{X selection}).  This is
@emph{not} the same thing as the @dfn{clipboard}, which is a separate
facility used on desktop environments such as Gnome, and on operating
systems such as Microsoft Windows (@pxref{Clipboard}).

  Under X, whenever you select some text in Emacs by dragging or
clicking the mouse (@pxref{Mouse Commands}), it is also saved in the
primary selection.  You can then @dfn{paste} that text into any other
X application, usually by clicking @kbd{Mouse-2} in that application.
Unlike the Emacs kill ring (@pxref{Kill Ring}), the primary selection
has no ``memory'': each time you save something in the primary
selection, either in Emacs or in another X application, the previous
contents of the primary selection are lost.

  Whenever you kill some text using a command such as @kbd{C-w}
(@code{kill-region}), or copy it into the kill ring using a command
such as @kbd{M-w} (@code{kill-ring-save}), that text is also saved in
the primary selection.  @xref{Killing}.

@vindex select-active-regions
  If you set the region using the keyboard---for instance, by typing
@kbd{C-@key{SPC}} and moving point away from the mark---the text in
the region is not normally saved to the primary selection.  However,
if you change the variable @code{select-active-regions} to @code{t},
the region is saved to the primary selection whenever you activate the
mark.  Each change to the region also updates the primary selection.

@vindex yank-pop-change-selection
  If you change @code{yank-pop-change-selection} to @code{t}, rotating
the kill ring with @kbd{M-y} (@code{yank-pop}) also saves the new yank
to the primary selection (@pxref{Yanking}).

@vindex save-interprogram-paste-before-kill
  If you change @code{save-interprogram-paste-before-kill} to
@code{t}, each kill command first saves the existing selection onto
the kill ring.  This prevents you from losing the existing selection,
at the risk of large memory consumption if other applications generate
large selections.

@cindex cut buffer
@vindex x-cut-buffer-max
  Whenever Emacs saves some text to the primary selection, it may also
save it to the @dfn{cut buffer}.  The cut buffer is an obsolete
predecessor to the primary selection; most modern applications do not
use it.  Saving text to the cut buffer is slow and inefficient, so
Emacs only does it if the text is shorter than the value of
@code{x-cut-buffer-max} (20000 characters by default).

  You can yank the primary selection into Emacs using the usual yank
commands, such as @kbd{C-y} (@code{yank}) and @kbd{Mouse-2}
(@code{mouse-yank-at-click}).  These commands actually check the
primary selection before referring to the kill ring; if no primary
selection is available, the kill ring contents are used.  To prevent
yank commands from accessing the primary selection, set the variable
@code{x-select-enable-primary} to @code{nil}.

  The standard coding system for the primary selection is
@code{compound-text-with-extensions}.  You may find that the pasted
text is not what you expected.  In such a case, you can specify
another coding system for the selection by typing @kbd{C-x @key{RET}
x} or @kbd{C-x @key{RET} X}.  Alternatively, you can request a
different data type by modifying the variable
@code{x-select-request-type}.  @xref{Communication Coding}.

@node Secondary Selection
@subsection Secondary Selection
@cindex secondary selection

  In addition to the primary selection, the X Window System provides a
second similar facility known as the @dfn{secondary selection}.
Nowadays, few X applications make use of the secondary selection, but
you can access it using the following Emacs commands:

@table @kbd
@findex mouse-set-secondary
@kindex M-Drag-Mouse-1
@item M-Drag-Mouse-1
Set the secondary selection, with one end at the place where you press
down the button, and the other end at the place where you release it
(@code{mouse-set-secondary}).  The selected text is highlighted, using
the @code{secondary-selection} face, as you drag.  The window scrolls
automatically if you drag the mouse off the top or bottom of the
window, just like @code{mouse-set-region} (@pxref{Mouse Commands}).

This command does not alter the kill ring.

@findex mouse-start-secondary
@kindex M-Mouse-1
@item M-Mouse-1
Set one endpoint for the @dfn{secondary selection}
(@code{mouse-start-secondary}).

@findex mouse-secondary-save-then-kill
@kindex M-Mouse-3
@item M-Mouse-3
Set the secondary selection, with one end at the position clicked and
the other at the position specified with @kbd{M-Mouse-1}
(@code{mouse-secondary-save-then-kill}).  This also puts the selected
text in the kill ring.  A second @kbd{M-Mouse-3} at the same place
kills the secondary selection just made.

@findex mouse-yank-secondary
@kindex M-Mouse-2
@item M-Mouse-2
Insert the secondary selection where you click, placing point at the
end of the yanked text (@code{mouse-yank-secondary}).
@end table

Double or triple clicking of @kbd{M-Mouse-1} operates on words and
lines, much like @kbd{Mouse-1}.

If @code{mouse-yank-at-point} is non-@code{nil}, @kbd{M-Mouse-2} yanks
at point.  Then it does not matter precisely where you click, or even
which of the frame's windows you click on.  @xref{Mouse Commands}.

@node Clipboard
@subsection Using the Clipboard
@cindex clipboard

  In desktop environments such as Gnome, and operating systems such as
Microsoft Windows and Mac OS X, you can transfer data (usually text)
between different applications using the @dfn{clipboard}.  The
clipboard is distinct from the primary selection and secondary
selection discussed earlier.  You can access the clipboard through the
@samp{Edit} menu of the menu bar (@pxref{Menu Bar}).

@cindex cut
@findex clipboard-kill-region
  The command @code{clipboard-kill-region}, which is bound to the
@code{Cut} menu item, kills the region and saves it in the clipboard.

@cindex copy
@findex clipboard-kill-ring-save
  The command @code{clipboard-kill-ring-save}, which is bound to the
@code{Copy} menu item, copies the region to the kill ring and saves it
in the clipboard.

@findex clipboard-yank
@cindex paste
  The @code{Paste} menu item in the Edit menu yanks the contents of
the clipboard at point (@code{clipboard-yank}).

@vindex x-select-enable-clipboard
  You can customize the variable @code{x-select-enable-clipboard} to
make the Emacs yank functions consult the clipboard before the primary
selection, and to make the kill functions to store in the clipboard as
well as the primary selection.  Otherwise, these commands do not
access the clipboard at all.  Using the clipboard is the default on
MS-Windows and Mac OS, but not on other systems.

@node Mouse References
@section Following References with the Mouse
@kindex Mouse-1 @r{(selection)}
@kindex Mouse-2 @r{(selection)}

@vindex mouse-highlight
  Some Emacs buffers include @dfn{buttons}.  A button is a piece of
text that performs some action when you activate it, such as following
a reference.  Usually, a button's text is visually highlighted: it is
underlined, or a box is drawn around it.  If you move the mouse over a
button, the shape of the mouse cursor changes and the button lights up
(if you change the variable @code{mouse-highlight} to @code{nil},
Emacs disables this highlighting).

  You can activate a button by moving point to it and typing
@key{RET}, or by clicking either @kbd{Mouse-1} or @kbd{Mouse-2} on the
button.  For example, typing @key{RET} or clicking on a file name in a
Dired buffer visits that file (@pxref{Dired}).  Doing it on an error
message in the @samp{*Compilation*} buffer goes to the source code for
that error message (@pxref{Compilation}).  Doing it on a completion in
the @samp{*Completions*} buffer chooses that completion
(@pxref{Completion}).

  Although clicking @kbd{Mouse-1} on a button usually activates that
button, if you hold the mouse button down for a short period of time
before releasing it (specifically, for more than 450 milliseconds),
then Emacs moves point where you clicked instead.  This behavior
allows you to use the mouse to move point over a button without
following it.  Dragging---moving the mouse while it is held down---has
its usual behavior of setting the region, even if you drag from or
onto a button.

@vindex mouse-1-click-in-non-selected-windows
  Normally, clicking @kbd{Mouse-1} on a button activates the button
even if it is in a nonselected window.  If you change the variable
@code{mouse-1-click-in-non-selected-windows} to @code{nil}, clicking
@kbd{Mouse-1} on a button in an un-selected window moves point to the
clicked position and selects that window, without activating the
button.

@vindex mouse-1-click-follows-link
  In Emacs versions before 22, only @kbd{Mouse-2} activates buttons
and @kbd{Mouse-1} always sets point.  If you prefer this older
behavior, set the variable @code{mouse-1-click-follows-link} to
@code{nil}.  This variable also lets you choose various other
alternatives for following links with the mouse.  Type @kbd{C-h v
mouse-1-click-follows-link @key{RET}} for more details.

@node Menu Mouse Clicks
@section Mouse Clicks for Menus

  Several mouse clicks with the @key{CTRL} and @key{SHIFT} modifiers
bring up menus.

@table @kbd
@item C-Mouse-1
@kindex C-Mouse-1
This menu is for selecting a buffer.

The MSB (``mouse select buffer'') global minor mode makes this
menu smarter and more customizable.  @xref{Buffer Menus}.

@item C-Mouse-2
@kindex C-Mouse-2
This menu is for specifying faces and other text properties
for editing formatted text.  @xref{Formatted Text}.

@item C-Mouse-3
@kindex C-Mouse-3
This menu is mode-specific.  For most modes if Menu-bar mode is on,
this menu has the same items as all the mode-specific menu-bar menus
put together.  Some modes may specify a different menu for this
button.@footnote{Some systems use @kbd{Mouse-3} for a mode-specific
menu.  We took a survey of users, and found they preferred to keep
@kbd{Mouse-3} for selecting and killing regions.  Hence the decision
to use @kbd{C-Mouse-3} for this menu.  To use @kbd{Mouse-3} instead,
do @code{(global-set-key [mouse-3] 'mouse-popup-menubar-stuff)}.}  If
Menu-bar mode is off, this menu contains all the items which would be
present in the menu bar---not just the mode-specific ones---so that
you can access them without having to display the menu bar.

@item S-Mouse-1
This menu is for changing the default face within the window's buffer.
@xref{Temporary Face Changes}.
@end table

@node Mode Line Mouse
@section Mode Line Mouse Commands
@cindex mode line, mouse
@cindex mouse on mode line

  You can use mouse clicks on window mode lines to select and manipulate
windows.

  Some areas of the mode line, such as the buffer name, and major and minor
mode names, have their own special mouse bindings.  These areas are
highlighted when you hold the mouse over them, and information about
the special bindings will be displayed (@pxref{Tooltips}).  This
section's commands do not apply in those areas.

@table @kbd
@item Mouse-1
@kindex Mouse-1 @r{(mode line)}
@kbd{Mouse-1} on a mode line selects the window it belongs to.  By
dragging @kbd{Mouse-1} on the mode line, you can move it, thus
changing the height of the windows above and below.  Changing heights
with the mouse in this way never deletes windows, it just refuses to
make any window smaller than the minimum height.

@item Mouse-2
@kindex Mouse-2 @r{(mode line)}
@kbd{Mouse-2} on a mode line expands that window to fill its frame.

@item Mouse-3
@kindex Mouse-3 @r{(mode line)}
@kbd{Mouse-3} on a mode line deletes the window it belongs to.  If the
frame has only one window, it buries the current buffer instead, and
switches to another buffer.

@item C-Mouse-2
@kindex C-mouse-2 @r{(mode line)}
@kbd{C-Mouse-2} on a mode line splits the window above
horizontally, above the place in the mode line where you click.
@end table

@kindex C-Mouse-2 @r{(scroll bar)}
@kindex Mouse-1 @r{(scroll bar)}
  Using @kbd{Mouse-1} on the divider between two side-by-side mode
lines, you can move the vertical boundary left or right.  Using
@kbd{C-Mouse-2} on a scroll bar splits the corresponding window
vertically.  @xref{Split Window}.

@node Creating Frames
@section Creating Frames
@cindex creating frames

@kindex C-x 5
  The prefix key @kbd{C-x 5} is analogous to @kbd{C-x 4}, with
parallel subcommands.  The difference is that @kbd{C-x 5} commands
create a new frame rather than just a new window in the selected frame
(@pxref{Pop Up Window}).  If an existing visible or iconified
(``minimized'') frame already displays the requested material, these
commands use the existing frame, after raising or deiconifying
(``un-minimizing'') as necessary.

  The various @kbd{C-x 5} commands differ in how they find or create the
buffer to select:

@table @kbd
@item C-x 5 2
@kindex C-x 5 2
@findex make-frame-command
Create a new frame (@code{make-frame-command}).
@item C-x 5 b @var{bufname} @key{RET}
Select buffer @var{bufname} in another frame.  This runs
@code{switch-to-buffer-other-frame}.
@item C-x 5 f @var{filename} @key{RET}
Visit file @var{filename} and select its buffer in another frame.  This
runs @code{find-file-other-frame}.  @xref{Visiting}.
@item C-x 5 d @var{directory} @key{RET}
Select a Dired buffer for directory @var{directory} in another frame.
This runs @code{dired-other-frame}.  @xref{Dired}.
@item C-x 5 m
Start composing a mail message in another frame.  This runs
@code{mail-other-frame}.  It is the other-frame variant of @kbd{C-x m}.
@xref{Sending Mail}.
@item C-x 5 .
Find a tag in the current tag table in another frame.  This runs
@code{find-tag-other-frame}, the multiple-frame variant of @kbd{M-.}.
@xref{Tags}.
@item C-x 5 r @var{filename} @key{RET}
@kindex C-x 5 r
@findex find-file-read-only-other-frame
Visit file @var{filename} read-only, and select its buffer in another
frame.  This runs @code{find-file-read-only-other-frame}.
@xref{Visiting}.
@end table

@cindex default-frame-alist
@cindex initial-frame-alist
@cindex face customization, in init file
@cindex color customization, in init file
  You can control the appearance of new frames you create by setting the
frame parameters in @code{default-frame-alist}.  You can use the
variable @code{initial-frame-alist} to specify parameters that affect
only the initial frame.  @xref{Initial Parameters,,, elisp, The Emacs
Lisp Reference Manual}, for more information.

@cindex font (default)
  Here is an example of using @code{default-frame-alist} to specify
the default foreground color and font:

@example
(add-to-list 'default-frame-alist '(font . "10x20"))
(add-to-list 'default-frame-alist '(foreground-color . "blue"))
@end example

@noindent
By putting such customizations in your init file, you can control the
appearance of all the frames Emacs creates, including the initial one
(@pxref{Init File}).  @xref{Fonts}, for other ways to set the default
font.

@node Frame Commands
@section Frame Commands

  The following commands let you create, delete and operate on frames:

@table @kbd
@item C-z
@kindex C-z @r{(X windows)}
@findex suspend-frame
Minimize (or ``iconify) the selected Emacs frame
(@code{suspend-frame}).  @xref{Exiting}.

@item C-x 5 0
@kindex C-x 5 0
@findex delete-frame
Delete the selected frame (@code{delete-frame}).  This is not allowed
if there is only one frame.

@item C-x 5 o
@kindex C-x 5 o
@findex other-frame
Select another frame, raise it, and warp the mouse to it.  If you
repeat this command, it cycles through all the frames on your
terminal.

@item C-x 5 1
@kindex C-x 5 1
@findex delete-other-frames
Delete all frames except the selected one.
@end table

  The @kbd{C-x 5 0} (@code{delete-frame}) command will never delete
the last frame, to prevent you from losing the ability to interact
with the Emacs process.  Note that when Emacs is run as a daemon
(@pxref{Emacs Server}), there is always a ``virtual frame'' that
remains after all the ordinary, interactive frames are deleted.  In
this case, @kbd{C-x 5 0} can delete the last interactive frame; you
can use @command{emacsclient} to reconnect to the Emacs session.

@vindex focus-follows-mouse
  On X, you may have to tell Emacs how the system (or the window
manager) handles focus-switching between windows, in order for the
command @kbd{C-x 5 o} (@code{other-frame}) to work properly.
Unfortunately, there is no way for Emacs to detect this automatically,
so you should set the variable @code{focus-follows-mouse}.  If simply
moving the mouse onto a window selects it and gives it focus, the
variable should be @code{t}; if you have to click on the window to
select it, the variable should be @code{nil}.  The default is
@code{t}.

  The window manager that is part of MS-Windows always gives focus to
a frame that raises, so this variable has no effect in the native
MS-Windows build of Emacs.

@node Fonts
@section Fonts
@cindex fonts

  By default, Emacs displays text in X using a 12-point monospace
font.  There are several different ways to specify a different font:

@itemize
@item
Click on @samp{Set Default Font} in the @samp{Options} menu.  To save
this for future sessions, click on @samp{Save Options} in the
@samp{Options} menu.

@item
Add a line to your init file (@pxref{Init File}), modifying the
variable @code{default-frame-alist} to specify the @code{font}
parameter (@pxref{Creating Frames}), like this:

@smallexample
(add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono-12"))
@end smallexample

@cindex X defaults file
@cindex X resources file
@item
Add an @samp{emacs.font} X resource setting to your X resource file,
like this:

@smallexample
emacs.font: DejaVu Sans Mono-12
@end smallexample

@noindent
You must restart X, or use the @command{xrdb} command, for the X
resources file to take effect.  @xref{Resources}.  When specifying a
font in your X resources file, you should not quote it.

@item
If you are running Emacs on the GNOME desktop, you can tell Emacs to
use the default system font by setting the variable
@code{font-use-system-font} to @code{t} (the default is @code{nil}).
For this to work, Emacs must be compiled with Gconf support; this is
done automatically if the libraries are present at compile time.

@item
Use the command line option @samp{-fn} (or @samp{--font}).  @xref{Font
X}.
@end itemize

@cindex fontconfig
  On X, there are four different ways to express a ``font name''.  The
first is to use a @dfn{Fontconfig pattern}.  Fontconfig patterns have
the following form:

@smallexample
@var{fontname}[-@var{fontsize}][:@var{name1}=@var{values1}][:@var{name2}=@var{values2}]...
@end smallexample

@noindent
Within this format, any of the elements in braces may be omitted.
Here, @var{fontname} is the @dfn{family name} of the font, such as
@samp{Monospace} or @samp{DejaVu Serif}; @var{fontsize} is the
@dfn{point size} of the font (one @dfn{printer's point} is about 1/72
of an inch); and the @samp{@var{name}=@var{values}} entries specify
settings such as the slant and weight of the font.  Each @var{values}
may be a single value, or a list of values separated by commas.  In
addition, some property values are valid with only one kind of
property name, in which case the @samp{@var{name}=} part may be
omitted.

Here is a list of common font properties:

@table @samp
@item slant
One of @samp{italic}, @samp{oblique} or @samp{roman}.

@item weight
One of @samp{light}, @samp{medium}, @samp{demibold}, @samp{bold} or
@samp{black}.

@item style
Some fonts define special styles which are a combination of slant and
weight.  For instance, @samp{Dejavu Sans} defines the @samp{book}
style, which overrides the slant and weight properties.

@item width
One of @samp{condensed}, @samp{normal}, or @samp{expanded}.

@item spacing
One of @samp{monospace}, @samp{proportional}, @samp{dual-width}, or
@samp{charcell}.
@end table

@noindent
Here are some examples of Fontconfig patterns:

@smallexample
Monospace
Monospace-12
Monospace-12:bold
DejaVu Sans Mono:bold:italic
Monospace-12:weight=bold:slant=italic
@end smallexample

See the Fontconfig manual for a more detailed description of
Fontconfig patterns.  This manual is located in the file
@file{fontconfig-user.html}, distributed with Fontconfig.  It is also
available online at @url{http://fontconfig.org/fontconfig-user.html}.
In particular, that manual describes additional font properties that
influence how the font is hinted, antialiased, or scaled.

  The second way to specify a font is to use a @dfn{GTK font
description}.  These have the syntax

@smallexample
@var{fontname} [@var{properties}] [@var{fontsize}]
@end smallexample

@noindent
where @var{fontname} is the family name, @var{properties} is a list of
property values separated by spaces, and @var{fontsize} is the point
size.  The properties that you may specify are as follows:

@table @samp
@item style
One of @samp{roman}, @samp{italic} or @samp{oblique}.  If omitted, the
@samp{roman} style is used.
@item weight
One of @samp{medium}, @samp{ultra-light}, @samp{light},
@samp{semi-bold}, or @samp{bold}.  If omitted, @samp{medium} weight is
used.
@end table

@noindent
Here are some examples of GTK font descriptions:

@smallexample
Monospace 12
Monospace Bold Italic 12
@end smallexample

@cindex XLFD
@cindex X Logical Font Description
  The third way to specify a font is to use an @dfn{XLFD} (@dfn{X
Logical Font Description}).  This is the traditional method for
specifying fonts under X.  Each XLFD consists of fourteen words or
numbers, separated by dashes, like this:

@smallexample
-misc-fixed-medium-r-semicondensed--13-*-*-*-c-60-iso8859-1
@end smallexample

@noindent
A wildcard character (@samp{*}) in an XLFD matches any sequence of
characters (including none), and @samp{?} matches any single
character.  However, matching is implementation-dependent, and can be
inaccurate when wildcards match dashes in a long name.  For reliable
results, supply all 14 dashes and use wildcards only within a field.
Case is insignificant in an XLFD.  The syntax for an XLFD is as
follows:

@smallexample
-@var{maker}-@var{family}-@var{weight}-@var{slant}-@var{widthtype}-@var{style}@dots{}
@dots{}-@var{pixels}-@var{height}-@var{horiz}-@var{vert}-@var{spacing}-@var{width}-@var{registry}-@var{encoding}
@end smallexample

@noindent
The entries have the following meanings:

@table @var
@item maker
The name of the font manufacturer.
@item family
The name of the font family (e.g. @samp{courier}).
@item weight
The font weight---normally either @samp{bold}, @samp{medium} or
@samp{light}.  Some font names support other values.
@item slant
The font slant---normally @samp{r} (roman), @samp{i} (italic),
@samp{o} (oblique), @samp{ri} (reverse italic), or @samp{ot} (other).
Some font names support other values.
@item widthtype
The font width---normally @samp{condensed}, @samp{extended},
@samp{semicondensed} or @samp{normal} (some font names support other
values).
@item style
An optional additional style name.  Usually it is empty---most long
font names have two hyphens in a row at this point.
@item pixels
The font height, in pixels.
@item height
The font height on the screen, measured in tenths of a printer's
point.  This is the point size of the font, times ten.  For a given
vertical resolution, @var{height} and @var{pixels} are proportional;
therefore, it is common to specify just one of them and use @samp{*}
for the other.
@item horiz
The horizontal resolution, in pixels per inch, of the screen for which
the font is intended.
@item vert
The vertical resolution, in pixels per inch, of the screen for which
the font is intended.  Normally the resolution of the fonts on your
system is the right value for your screen; therefore, you normally
specify @samp{*} for this and @var{horiz}.
@item spacing
This is @samp{m} (monospace), @samp{p} (proportional) or @samp{c}
(character cell).
@item width
The average character width, in pixels, multiplied by ten.
@item registry
@itemx encoding
The X font character set that the font depicts.  (X font character
sets are not the same as Emacs character sets, but they are similar.)
You can use the @command{xfontsel} program to check which choices you
have.  Normally you should use @samp{iso8859} for @var{registry} and
@samp{1} for @var{encoding}.
@end table

  The fourth and final method of specifying a font is to use a ``font
nickname''.  Certain fonts have shorter nicknames, which you can use
instead of a normal font specification.  For instance, @samp{6x13} is
equivalent to

@smallexample
-misc-fixed-medium-r-semicondensed--13-*-*-*-c-60-iso8859-1
@end smallexample

@cindex client-side fonts
@cindex server-side fonts
  On X, Emacs recognizes two types of fonts: @dfn{client-side} fonts,
which are provided by the Xft and Fontconfig libraries, and
@dfn{server-side} fonts, which are provided by the X server itself.
Most client-side fonts support advanced font features such as
antialiasing and subpixel hinting, while server-side fonts do not.
Fontconfig and GTK patterns match only client-side fonts.

@cindex listing system fonts
  You will probably want to use a fixed-width default font---that is,
a font in which all characters have the same width.  For Xft and
Fontconfig fonts, you can use the @command{fc-list} command to list
the available fixed-width fonts, like this:

@example
fc-list :spacing=mono fc-list :spacing=charcell
@end example

@noindent
For server-side X fonts, you can use the @command{xlsfonts} program to
list the available fixed-width fonts, like this:

@example
xlsfonts -fn '*x*' | egrep "^[0-9]+x[0-9]+"
xlsfonts -fn '*-*-*-*-*-*-*-*-*-*-*-m*'
xlsfonts -fn '*-*-*-*-*-*-*-*-*-*-*-c*'
@end example

@noindent
Any font with @samp{m} or @samp{c} in the @var{spacing} field of the
XLFD is a fixed-width font.  To see what a particular font looks like,
use the @command{xfd} command.  For example:

@example
xfd -fn 6x13
@end example

@noindent
displays the entire font @samp{6x13}.

  While running Emacs, you can also set the font of a specific kind of
text (@pxref{Faces}), or a particular frame (@pxref{Frame
Parameters}).

@node Speedbar
@section Speedbar Frames
@cindex speedbar

@cindex attached frame (of speedbar)
  The @dfn{speedbar} is a special frame for conveniently navigating in
or operating on another frame.  The speedbar, when it exists, is
always associated with a specific frame, called its @dfn{attached
frame}; all speedbar operations act on that frame.

  Type @kbd{M-x speedbar} to create the speedbar and associate it with
the current frame.  To dismiss the speedbar, type @kbd{M-x speedbar}
again, or select the speedbar and type @kbd{q}.  (You can also delete
the speedbar frame like any other Emacs frame.)  If you wish to
associate the speedbar with a different frame, dismiss it and call
@kbd{M-x speedbar} from that frame.

  The speedbar can operate in various modes.  Its default mode is
@dfn{File Display} mode, which shows the files in the current
directory of the selected window of the attached frame, one file per
line.  Clicking on a file name visits that file in the selected window
of the attached frame, and clicking on a directory name shows that
directory in the speedbar (@pxref{Mouse References}).  Each line also
has a box, @samp{[+]} or @samp{<+>}, that you can click on to
@dfn{expand} the contents of that item.  Expanding a directory adds
the contents of that directory to the speedbar display, underneath the
directory's own line.  Expanding an ordinary file adds a list of the
tags in that file to the speedbar display; you can click on a tag name
to jump to that tag in the selected window of the attached frame.
When a file or directory is expanded, the @samp{[+]} changes to
@samp{[-]}; you can click on that box to @dfn{contract} the item,
hiding its contents.

  You navigate through the speedbar using the keyboard, too.  Typing
@kbd{RET} while point is on a line in the speedbar is equivalent to
clicking the item on the current line, and @kbd{SPC} expands or
contracts the item.  @kbd{U} displays the parent directory of the
current directory.  To copy, delete, or rename the file on the current
line, type @kbd{C}, @kbd{D}, and @kbd{R} respectively.  To create a
new directory, type @kbd{M}.

  Another general-purpose speedbar mode is @dfn{Buffer Display} mode;
in this mode, the speedbar displays a list of Emacs buffers.  To
switch to this mode, type @kbd{b} in the speedbar.  To return to File
Display mode, type @kbd{f}.  You can also change the display mode by
clicking @kbd{mouse-3} anywhere in the speedbar window (or
@kbd{mouse-1} on the mode-line) and selecting @samp{Displays} in the
pop-up menu.

  Some major modes, including Rmail mode, Info, and GUD, have
specialized ways of putting useful items into the speedbar for you to
select.  For example, in Rmail mode, the speedbar shows a list of Rmail
files, and lets you move the current message to another Rmail file by
clicking on its @samp{<M>} box.

  For more details on using and programming the speedbar, @xref{Top,
Speedbar,,speedbar, Speedbar Manual}.

@node Multiple Displays
@section Multiple Displays
@cindex multiple displays

  A single Emacs can talk to more than one X display.  Initially, Emacs
uses just one display---the one specified with the @env{DISPLAY}
environment variable or with the @samp{--display} option (@pxref{Initial
Options}).  To connect to another display, use the command
@code{make-frame-on-display}:

@findex make-frame-on-display
@table @kbd
@item M-x make-frame-on-display @key{RET} @var{display} @key{RET}
Create a new frame on display @var{display}.
@end table

  A single X server can handle more than one screen.  When you open
frames on two screens belonging to one server, Emacs knows they share a
single keyboard, and it treats all the commands arriving from these
screens as a single stream of input.

  When you open frames on different X servers, Emacs makes a separate
input stream for each server.  Each server also has its own selected
frame.  The commands you enter with a particular X server apply to
that server's selected frame.

  It is even possible to use this feature to let two or more users
type simultaneously on the two displays, within the same Emacs job.
In practice, however, the different users can easily interfere with
each others' edits if they are not careful.

@node Special Buffer Frames
@section Special Buffer Frames

@vindex special-display-buffer-names
  You can make certain chosen buffers, which Emacs normally displays
in ``another window,'' appear in special frames of their own.  To do
this, set the variable @code{special-display-buffer-names} to a list
of buffer names; any buffer whose name is in that list automatically
gets a special frame, when an Emacs command wants to display it ``in
another window.''

  For example, if you set the variable this way,

@example
(setq special-display-buffer-names
      '("*Completions*" "*grep*" "*tex-shell*"))
@end example

@noindent
then completion lists, @code{grep} output and the @TeX{} mode shell
buffer get individual frames of their own.  These frames, and the
windows in them, are never automatically split or reused for any other
buffers.  They continue to show the buffers they were created for,
unless you alter them by hand.  Killing the special buffer deletes its
frame automatically.

@vindex special-display-regexps
  More generally, you can set @code{special-display-regexps} to a list
of regular expressions; then a buffer gets its own frame if its name
matches any of those regular expressions.  (Once again, this applies only
to buffers that normally get displayed for you in ``another window.'')

@vindex special-display-frame-alist
  The variable @code{special-display-frame-alist} specifies the frame
parameters for these frames.  It has a default value, so you don't need
to set it.

  For those who know Lisp, an element of
@code{special-display-buffer-names} or @code{special-display-regexps}
can also be a list.  Then the first element is the buffer name or
regular expression; the rest of the list specifies how to create the
frame.  It can be an association list specifying frame parameter
values; these values take precedence over parameter values specified
in @code{special-display-frame-alist}.  If you specify the symbol
@code{same-window} as a ``frame parameter'' in this list, with a
non-@code{nil} value, that means to use the selected window if
possible.  If you use the symbol @code{same-frame} as a ``frame
parameter'' in this list, with a non-@code{nil} value, that means to
use the selected frame if possible.

  Alternatively, the value can have this form:

@example
(@var{function} @var{args}...)
@end example

@noindent
where @var{function} is a symbol.  Then the frame is constructed by
calling @var{function}; its first argument is the buffer, and its
remaining arguments are @var{args}.

   An analogous feature lets you specify buffers which should be
displayed in the selected window.  @xref{Force Same Window}.  The
same-window feature takes precedence over the special-frame feature;
therefore, if you add a buffer name to
@code{special-display-buffer-names} and it has no effect, check to see
whether that feature is also in use for the same buffer name.

@node Frame Parameters
@section Setting Frame Parameters
@cindex Auto-Raise mode
@cindex Auto-Lower mode

  These commands are available for controlling the window management
behavior of the selected frame:

@table @kbd
@findex auto-raise-mode
@item M-x auto-raise-mode
Toggle whether or not the selected frame should auto-raise.  Auto-raise
means that every time you move the mouse onto the frame, it raises the
frame.

Some window managers also implement auto-raise.  If you enable
auto-raise for Emacs frames in your window manager, it will work, but
it is beyond Emacs' control, so @code{auto-raise-mode} has no effect
on it.

@findex auto-lower-mode
@item M-x auto-lower-mode
Toggle whether or not the selected frame should auto-lower.
Auto-lower means that every time you move the mouse off the frame,
the frame moves to the bottom of the stack on the screen.

The command @code{auto-lower-mode} has no effect on auto-lower
implemented by the window manager.  To control that, you must use the
appropriate window manager features.
@end table

  In Emacs versions that use an X toolkit, the color-setting and
font-setting functions don't affect menus and the menu bar, since they
are displayed by their own widget classes.  To change the appearance of
the menus and menu bar, you must use X resources (@pxref{Resources}).
@xref{Colors}, regarding colors.  @xref{Font X}, regarding choice of
font.

  Colors, fonts, and other attributes of the frame's display can also
be customized by setting frame parameters in the variable
@code{default-frame-alist} (@pxref{Creating Frames}).  For a detailed
description of frame parameters and customization, see @ref{Frame
Parameters,,, elisp, The Emacs Lisp Reference Manual}.

@node Scroll Bars
@section Scroll Bars
@cindex Scroll Bar mode
@cindex mode, Scroll Bar

  On graphical displays, Emacs normally makes a @dfn{scroll bar} at
the left of each Emacs window, running the height of the
window.@footnote{Placing it at the left is usually more useful with
overlapping frames with text starting at the left margin.}

  When Emacs is compiled with GTK+ support on the X window system, or
in operating systems such as Microsoft Windows or Mac OS, you can use
the scroll bar as you do in other graphical applications.  If you
click @kbd{Mouse-1} on the scroll bar's up and down buttons, that
scrolls the window by one line at a time.  Clicking @kbd{Mouse-1}
above or below the scroll bar's inner box scrolls the window by nearly
the entire height of the window, like @kbd{M-v} and @kbd{C-v}
respectively (@pxref{Moving Point}).  Dragging the inner box with
@kbd{Mouse-1} scrolls the window continuously.

  If Emacs is compiled without GTK+ support on the X window system,
the scroll bar behaves differently.  The scroll bar's inner box is
drawn to represent the portion of the buffer currently displayed, with
the entire height of the scroll bar representing the entire length of
the buffer.  @kbd{Mouse-1} anywhere on the scroll bar scrolls forward
like @kbd{C-v}, and @kbd{Mouse-3} scrolls backward like @kbd{M-v}.
Clicking @kbd{Mouse-2} in the scroll bar lets you move or drag the
inner box up and down.

  You can also click @kbd{C-Mouse-2} in the scroll bar to split a
window vertically.  The split occurs on the line where you click.

@findex scroll-bar-mode
@vindex scroll-bar-mode
  You can toggle the use of the scroll bar with the command @kbd{M-x
scroll-bar-mode}.  With a prefix argument, this command turns use of
scroll bars on if and only if the argument is positive.  This command
applies to all frames, including frames yet to be created.  Customize
the variable @code{scroll-bar-mode} to control the use of scroll bars
at startup.  You can use it to specify that they are placed at the
right of windows if you prefer that.  You have to set this variable
through the @samp{Customize} interface (@pxref{Easy Customization}),
or it will not work properly.  You can also use the X resource
@samp{verticalScrollBars} to control the initial setting of Scroll Bar
mode.  @xref{Resources}.

@findex toggle-scroll-bar
  To enable or disable scroll bars for just the selected frame, use the
command @kbd{M-x toggle-scroll-bar}.

@vindex scroll-bar-width
@cindex width of the scroll bar
  You can control the scroll bar width by changing the value of the
@code{scroll-bar-width} frame parameter.

@node Wheeled Mice
@section Scrolling With ``Wheeled'' Mice

@cindex mouse wheel
@cindex wheel, mouse
@findex mouse-wheel-mode
@cindex Mouse Wheel minor mode
@cindex mode, Mouse Wheel
  Some mice have a ``wheel'' instead of a third button.  You can
usually click the wheel to act as either @kbd{Mouse-2} or
@kbd{Mouse-3}, depending on the setup.  You can also use the wheel to
scroll windows instead of using the scroll bar or keyboard commands.
Mouse wheel support only works if the system generates appropriate
events; whenever possible, it is turned on by default.  To toggle this
feature, use @kbd{M-x mouse-wheel-mode}.

@vindex mouse-wheel-follow-mouse
@vindex mouse-wheel-scroll-amount
@vindex mouse-wheel-progressive-speed
  The two variables @code{mouse-wheel-follow-mouse} and
@code{mouse-wheel-scroll-amount} determine where and by how much
buffers are scrolled.  The variable
@code{mouse-wheel-progressive-speed} determines whether the scroll
speed is linked to how fast you move the wheel.

@node Drag and Drop
@section Drag and Drop
@cindex drag and drop

  Emacs supports @dfn{drag and drop} using the mouse.  For instance,
dropping text onto an Emacs frame inserts the text where it is dropped.
Dropping a file onto an Emacs frame visits that file.  As a special
case, dropping the file on a Dired buffer moves or copies the file
(according to the conventions of the application it came from) into the
directory displayed in that buffer.

@vindex dnd-open-file-other-window
  Dropping a file normally visits it in the window you drop it on.  If
you prefer to visit the file in a new window in such cases, customize
the variable @code{dnd-open-file-other-window}.

  The XDND and Motif drag and drop protocols, and the old KDE 1.x
protocol, are currently supported.

@node Menu Bars
@section Menu Bars
@cindex Menu Bar mode
@cindex mode, Menu Bar
@findex menu-bar-mode
@vindex menu-bar-mode

  You can turn display of menu bars on or off with @kbd{M-x
menu-bar-mode} or by customizing the variable @code{menu-bar-mode}.
With no argument, this command toggles Menu Bar mode, a
minor mode.  With an argument, the command turns Menu Bar mode on if the
argument is positive, off if the argument is not positive.  You can use
the X resource @samp{menuBar} to control the initial setting of
Menu Bar mode.  @xref{Resources}.

@kindex C-Mouse-3 @r{(when menu bar is disabled)}
  Expert users often turn off the menu bar, especially on text-only
terminals, where this makes one additional line available for text.
If the menu bar is off, you can still pop up a menu of its contents
with @kbd{C-Mouse-3} on a display which supports pop-up menus.
@xref{Menu Mouse Clicks}.

  @xref{Menu Bar}, for information on how to invoke commands with the
menu bar.  @xref{X Resources}, for how to customize the menu bar
menus' visual appearance.

@node Tool Bars
@section Tool Bars
@cindex Tool Bar mode
@cindex mode, Tool Bar
@cindex icons, toolbar

  The @dfn{tool bar} is a line (or lines) of icons at the top of the
Emacs window, just below the menu bar.  You can click on these icons
with the mouse to do various jobs.

  The global tool bar contains general commands.  Some major modes
define their own tool bars to replace it.  A few ``special'' modes
that are not designed for ordinary editing remove some items from the
global tool bar.

  Tool bars work only on a graphical display.  The tool bar uses colored
XPM icons if Emacs was built with XPM support.  Otherwise, the tool
bar uses monochrome icons (PBM or XBM format).

@findex tool-bar-mode
@vindex tool-bar-mode
  You can turn display of tool bars on or off with @kbd{M-x
tool-bar-mode} or by customizing the option @code{tool-bar-mode}.

@node Dialog Boxes
@section Using Dialog Boxes
@cindex dialog boxes

@vindex use-dialog-box
  A dialog box is a special kind of menu for asking you a yes-or-no
question or some other special question.  Many Emacs commands use a
dialog box to ask a yes-or-no question, if you used the mouse to
invoke the command that led to the question.

  To disable the use of dialog boxes, change the variable
@code{use-dialog-box} to @code{nil}.  In that case, Emacs always
performs yes-or-no prompts using the echo area and keyboard input.
This variable also controls whether to use file selection windows (but
those are not supported on all platforms).

@vindex use-file-dialog
@cindex file selection dialog, how to disable
  A file selection window is a special kind of dialog box for asking
for file names.  You can customize the variable @code{use-file-dialog}
to suppress the use of file selection windows, even if you still want
other kinds of dialogs.  This variable has no effect if you have
suppressed all dialog boxes with the variable @code{use-dialog-box}.

@vindex x-gtk-show-hidden-files
@vindex x-gtk-file-dialog-help-text
@cindex hidden files, in GTK+ file chooser
@cindex help text, in GTK+ file chooser
  When Emacs is compiled with GTK+ support, it uses the GTK+ ``file
chooser'' dialog.  Emacs adds an additional toggle button to this
dialog, which you can use to enable or disable the display of hidden
files (files starting with a dot) in that dialog.  If you want this
toggle to be activated by default, change the variable
@code{x-gtk-show-hidden-files} to @code{t}.  In addition, Emacs adds
help text to the GTK+ file chooser dialog; to disable this help text,
change the variable @code{x-gtk-file-dialog-help-text} to @code{nil}.

@vindex x-gtk-use-old-file-dialog
  In GTK+ versions 2.4 through 2.10, you can choose to use an older
version of the GTK+ file dialog by setting the variable
@code{x-gtk-use-old-file-dialog} to a non-@code{nil} value.  If Emacs
is built with a GTK+ version that has only one file dialog, this
variable has no effect.

@node Tooltips
@section Tooltips
@cindex tooltips

  @dfn{Tooltips} are small windows that display text information at the
current mouse position.  They activate when there is a pause in mouse
movement.  There are two types of tooltip: help tooltips and GUD
tooltips.

  @dfn{Help tooltips} typically display over text---including the mode
line---but are also available for other parts of the Emacs frame, such
as the tool bar and menu items.

@findex tooltip-mode
  You can toggle display of help tooltips (Tooltip mode) with the
command @kbd{M-x tooltip-mode}.  When Tooltip mode is disabled, the
help text is displayed in the echo area instead.

  @dfn{GUD tooltips} show values of variables.  They are useful when
you are debugging a program.  @xref{Debugger Operation}.

@vindex tooltip-delay
  The variables @code{tooltip-delay} specifies how long Emacs should
wait before displaying a tooltip.  For additional customization
options for displaying tooltips, use @kbd{M-x customize-group
@key{RET} tooltip @key{RET}}.  @xref{X Resources}, for information on
customizing the windows that display tooltips.

@node Mouse Avoidance
@section Mouse Avoidance
@cindex avoiding mouse in the way of your typing
@cindex mouse avoidance

  On graphical terminals, the mouse pointer may obscure the text in
the Emacs frame.  Emacs provides two methods to avoid this problem.

@vindex make-pointer-invisible
  Firstly, Emacs hides the mouse pointer each time you type a
self-inserting character, if the pointer lies inside an Emacs frame;
moving the mouse pointer makes it visible again.  To disable this
feature, set the variable @code{make-pointer-invisible} to @code{nil}.

@vindex mouse-avoidance-mode
  Secondly, you can use Mouse Avoidance mode, a minor mode, to keep
the mouse pointer away from point.  To use Mouse Avoidance mode,
customize the variable @code{mouse-avoidance-mode}.  You can set this
to various values to move the mouse in several ways:

@table @code
@item banish
Move the mouse to the upper-right corner on any key-press;
@item exile
Move the mouse to the corner only if the cursor gets too close,
and allow it to return once the cursor is out of the way;
@item jump
If the cursor gets too close to the mouse, displace the mouse
a random distance & direction;
@item animate
As @code{jump}, but shows steps along the way for illusion of motion;
@item cat-and-mouse
The same as @code{animate};
@item proteus
As @code{animate}, but changes the shape of the mouse pointer too.
@end table

@findex mouse-avoidance-mode
You can also use the command @kbd{M-x mouse-avoidance-mode} to enable
the mode.  Whenever Mouse Avoidance mode moves the mouse, it also
raises the frame.

@node Non-Window Terminals
@section Non-Window Terminals
@cindex non-window terminals
@cindex single-frame terminals

  On a text-only terminal, Emacs can display only one Emacs frame at a
time.  However, you can still create multiple Emacs frames, and switch
between them.  Switching frames on these terminals is much like
switching between different window configurations.

  Use @kbd{C-x 5 2} to create a new frame and switch to it; use @kbd{C-x
5 o} to cycle through the existing frames; use @kbd{C-x 5 0} to delete
the current frame.

  Each frame has a number to distinguish it.  If your terminal can
display only one frame at a time, the selected frame's number @var{n}
appears near the beginning of the mode line, in the form
@samp{F@var{n}}.

@findex set-frame-name
@findex select-frame-by-name
  @samp{F@var{n}} is in fact the frame's initial name.  You can give
frames more meaningful names if you wish, and you can select a frame
by its name.  Use the command @kbd{M-x set-frame-name @key{RET}
@var{name} @key{RET}} to specify a new name for the selected frame,
and use @kbd{M-x select-frame-by-name @key{RET} @var{name} @key{RET}}
to select a frame according to its name.  The name you specify appears
in the mode line when the frame is selected.

@node Text-Only Mouse
@section Using a Mouse in Terminal Emulators
@cindex mouse support
@cindex terminal emulators, mouse support

Some text-only terminals support mouse clicks in the terminal window.

@cindex xterm
In a terminal emulator which is compatible with @code{xterm},
you can use @kbd{M-x xterm-mouse-mode} to give Emacs control over
simple use of the mouse---basically, only non-modified single clicks
are supported.  The normal @code{xterm} mouse functionality for such
clicks is still available by holding down the @kbd{SHIFT} key when you
press the mouse button.  Xterm Mouse mode is a global minor mode
(@pxref{Minor Modes}).  Repeating the command turns the mode off
again.

@findex gpm-mouse-mode
In the console on GNU/Linux, you can use @kbd{M-x gpm-mouse-mode} to
enable terminal mouse support.  You must have the gpm package
installed and running on your system in order for this to work.

@ignore
   arch-tag: 7dcf3a31-a43b-45d4-a900-445b10d77e49
@end ignore
